Q1: import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
 
class Main{
    // Function to find the k'th largest element in an array using max-heap
    public static int findKthLargest(List<Integer> ints, int k){
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
                                    // or pass `Comparator.reverseOrder()`
        pq.addAll(ints);
 
        // pop from max-heap exactly `k-1` times
        while (--k > 0) {
            pq.poll();
        }
        return pq.peek();
    }
 
    public static void main(String[] args){
        List<Integer> ints = Arrays.asList(7, 4, 6, 3, 9, 1);
        int k = 2;
        System.out.println("k'th largest array element is " + findKthLargest(ints, k));
    }
}

Q2: import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
 
class Main{
    public static int findKthLargest(List<Integer> ints, int k){
        // create a min-heap using the `PriorityQueue` class and insert the first `k` array elements into the heap
        PriorityQueue<Integer> pq = new PriorityQueue<>(ints.subList(0, k));
 
        for (int i = k; i < ints.size(); i++){
            // if the current element is more than the root of the heap
            if (ints.get(i) > pq.peek()){
                // replace root with the current element
                pq.poll();
                pq.add(ints.get(i));
            }
        }
        return pq.peek();
    }

    public static void main(String[] args){
        List<Integer> ints = Arrays.asList(7, 4, 6, 3, 9, 1);
        int k = 2;
 
        System.out.println("k'th largest array element is " + findKthLargest(ints, k));
    }
}

Q3: import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
 
class Main{
    // Function to calculate the minimum cost to join `n` ropes into a single rope
    public static int findMinCost(List<Integer> prices)
    {
        // create a min-heap using `PriorityQueue` class from elements of the list
        PriorityQueue<Integer> pq = new PriorityQueue<>(prices);
 
        // keep track of the minimum cost so far
        int cost = 0;
 
        // repeat till heap size is reduced to one
        while (pq.size() > 1){
            // Extract the top two elements from the min-heap
            int x = pq.poll();
            int y = pq.poll();
 
            // calculate the cost of the extracted values
            int sum = x + y;
 
            // insert the cost back to the min-heap
            pq.add(sum);
 
            // update the minimum cost
            cost += sum;
        }
        return cost;
    }
 
    public static void main(String[] args){
        List<Integer> prices = Arrays.asList(5, 4, 2, 8);
        System.out.println("The minimum cost is " + findMinCost(prices));
    }
}

Q4: import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.*;
 
class Main{
   public static void topKFrequent(String[] words, int k) {
        
        List<String> result = new ArrayList<String>();
        Map<String, Integer> map = new HashMap<>();
        
        for(int i=0; i<words.length; i++){
            if(map.containsKey(words[i]))
                map.put(words[i], map.get(words[i])+1);
            else
                map.put(words[i], 1);
        }
        
        PriorityQueue<Map.Entry<String, Integer>> pq = new PriorityQueue<>(
                 (a,b) -> a.getValue()==b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue()-b.getValue()
        );
        
        for(Map.Entry<String, Integer> entry: map.entrySet()) {
            pq.offer(entry);
            if(pq.size()>k)
                pq.poll();
        }

        while(!pq.isEmpty()) result.add(0, pq.poll().getKey());
        
        for(String res : result){
            System.out.print(res + "  ");
        }
    }
    public static void main(String[] args){
        String[] input = { "PW" , "PWskills" , "PhysicsWallah" , "PW" , "PhysicsWallah" , "PWJAVA" , "Code" };
        topKFrequent(input , 3);
    }
}

Q5: import java.util.*;
 
class Main{
   public static int lastStoneWeight(int[] A) {
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b)-> b - a);
        for (int a : A)
            pq.offer(a);
        while (pq.size() > 1)
            pq.offer(pq.poll() - pq.poll());
        return pq.poll();
    }
    public static void main(String[] args){
        int[] input = {2,7,4,1,8,1};
        System.out.println("The desired output is : " + lastStoneWeight(input));
    }
}
