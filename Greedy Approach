Q1: import java.math.*;

class Solution {
	static int minproduct(int a[], int b[], int n, int k){
		int diff = 0, res = 0;
		int temp = 0;
		for (int i = 0; i < n; i++) {
			int pro = a[i] * b[i];
			res = res + pro;
			if (pro < 0 && b[i] < 0)
				temp = (a[i] + 2 * k) * b[i];

			else if (pro < 0 && a[i] < 0)temp = (a[i] - 2 * k) * b[i];
			else if (pro > 0 && a[i] < 0)temp = (a[i] + 2 * k) * b[i];
			else if (pro > 0 && a[i] > 0)temp = (a[i] - 2 * k) * b[i];

			int d = Math.abs(pro - temp);
			if (d > diff)diff = d;
		}

		return res - diff;
	}

	public static void main(String[] args){
		int a[] = { 2, -3, 4, 6, 9 };
		int b[] = { 1, 4, -2, -3, 7 };
		int n = 5, k = 3;
		System.out.println(minproduct(a, b, n, k));
	}
}

Q2: import java.io.*;
import java.lang.*;
import java.util.*;

class ActivitySelection {
	// Prints a maximum set of activities that can be done by a single person, one at a time.
	public static void printMaxActivities(int s[], int f[],	int n){
		int i, j;

		System.out.println("These activities are selected : ");

		i = 0;
		System.out.print(i + " ");

		// Consider rest of the activities
		for (j = 1; j < n; j++) {
			// If this activity has start time greater than or equal to the finish time of previously selected activity, then select it
			if (s[j] >= f[i]) {
				System.out.print(j + " ");
				i = j;
			}
		}
	}
	public static void main(String[] args){
		int start[] = { 1, 3, 0, 5, 8, 5 };
		int finish[] = { 3, 5, 6, 8, 9, 9 };
		int n = start.length;
		printMaxActivities(start, finish, n);
	}
}

Q3: import java.io.*;
import java.lang.*;
import java.util.*;

class Solution {
    public static int canCompleteCircuit(int[] gas, int[] cost) {
        // Initialize totalGas and totalCost to 0
        int totalGas = 0, totalCost = 0;
        // Iterate through all the gas stations
        for(int i = 0 ; i<gas.length; i++){
            // Add the gas and cost at each station to the total
            totalGas += gas[i];
            totalCost += cost[i];
        }
        // If totalCost is greater than totalGas, it is not possible to complete the circuit
        if(totalGas < totalCost) return -1;
        
        // Initialize remainsGas and start to 0
        int remainsGas = 0, start = 0;
        // Iterate through all the gas stations
        for(int i = 0 ; i < gas.length; i++){
            // Add the difference between gas and cost at each station to remainsGas
            remainsGas = remainsGas +(gas[i] - cost[i]);
            // If remainsGas becomes negative, set start to the next station and reset remainsGas to 0
            if(remainsGas < 0 ){
                start = i+1;
                remainsGas = 0;
            }
        }
        // Return the starting station
        return start;
    }
	public static void main(String[] args){
		int gas[] = {1, 2, 3, 4, 5};
		int cost[] = {3, 4, 5, 1, 2};
		System.out.println("The starting station is : " + canCompleteCircuit(gas , cost));
	}
}

Q4: import java.io.*;
import java.lang.*;
import java.util.*;

class Solution {
   public static boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0;
        
        for(int i = 0; i < flowerbed.length; i++){
            if(flowerbed[i] == 0){
                int prev = (i == 0 || flowerbed[i - 1] == 0) ? 0 : 1;
                int next = (i == flowerbed.length - 1 || flowerbed[i + 1] == 0) ? 0 : 1;
                
                if(prev == 0 && next == 0){
                    flowerbed[i] = 1;
                    count++;
                }
            }
        }
        return count >= n;
    }
	public static void main(String[] args){
		int flowerbed[] = {1, 0, 0, 0, 1};
		int n = 1;
		System.out.println("The desired output is :  " + canPlaceFlowers(flowerbed , n));
	}
}

Q5: import java.io.*;
import java.lang.*;
import java.util.*;

class Solution {
   public static int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[1], b[1]));
        int[] curr = new int[] {intervals[0][0], intervals[0][1]};
        int maxCap = 1;
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] < curr[1]) continue; 
            curr[0] = intervals[i][0];
            curr[1] = intervals[i][1];
            maxCap++;
        }
        return intervals.length - maxCap;
    }
	public static void main(String[] args){
	    int[][] intervals = {{1,2},{2,3},{3,4},{1,3}};
		int n = 1;
		System.out.println("The desired output is :  " + eraseOverlapIntervals(intervals));
	}
}
